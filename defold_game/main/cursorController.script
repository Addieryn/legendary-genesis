--import cursor script from /in folder declare local variables
local cursor = require "in.cursor"
local canDragCard = false
local cardsInDropZone = 0
local x_pos = 0
local y_pos = 0


function init(self)
	if not go.get("#cursor", "acquire_input_focus") then
		self.forward_input = true
		msg.post(".", "acquire_input_focus")
	end

	cursor.listen(msg.url(#"cursor"), cursor.DRAG_START, function (message_id, message)
		print ("drag")
		--determine whether card should be draggable
		if message.group == hash("cards") then
			if canDragCard == false then
				return true
			end
			print("draggin a card")
		elseif message.group == hash("dropzone") then
			--prevent dragging od dropzones
			return true
		end

	end)

	-- testing to find game object collision object url for later use
	for i = 1, 16 do
		local col_url = msg.url("/board#zone" .. i)
		print(col_url)
	end
	
	
end


-- range function
local function range(min, max)
	return function(x)
		return x >= min and x <= max
	end
end

function on_input(self, action_id, action)
	if self.forward_input then
		msg.post("#cursor", "input", { action_id = action_id, action = action})
	end
end

function on_message(self, message_id, message, sender)
		if message_id == cursor.OVER then
		print("Cursor over", message.id, message.group, message.x, message.y)
		if message.group == hash("dropzone") then
			self.over_dropzone = true
		end
	elseif message_id == cursor.OUT then
		print("Cursor out", message.id, message.group, message.x, message.y)
		if message.group == hash("dropzone") then
			self.over_dropzone = false
		end
	elseif message_id == cursor.PRESSED then
		print("Pressed", message.id, message.group, message.x, message.y)
		if message.group == hash("cards") then
			local url = msg.url(message.id)
			url.fragment = "card"
			canDragCard = go.get(url, "isDraggable")
			print (canDragCard)
		end
	elseif message.id == cursor.RELEASED then
		print("Released", message.id, message.group, message.x, message.y)
		if message.group == hash("cards") then
			canDragCard = false
		end
	elseif message.id == cursor.CLICKED then
		print("Clicked", message.id, message.group, message.x, message.y)
	elseif message_id == cursor.DRAG_START then
		print("Drag started", message.id, message.group, message.x, message.y)
	elseif message_id == cursor.DRAG_END then
		print("Drag ended", message.id, message.group, message.x, message.y)
		--incrementally display cards over dropzones and dropzone
		if message.group == hash("cards") and self.over_dropzone then
				if x_pos < 4 and y_pos < 4 then
					local p = vmath.vector3(102 + (cardsInDropZone * 115), 485, 1)
					go.set_position(p, message.id)
					cardsInDropZone = cardsInDropZone + 1
					x_pos = x_pos + 1
					y_pos = y_pos + 1
					print(x_pos, y_pos)
					if x_pos == 4 and y_pos == 4 and cardsInDropZone == 4 then
						cardsInDropZone = 0
					end
				elseif range(4, 8)(x_pos) and range(4, 8)(y_pos) then
					local p = vmath.vector3(102 + (cardsInDropZone * 115), 382, 1)
					go.set_position(p, message.id)
					cardsInDropZone = cardsInDropZone + 1
					x_pos = x_pos + 1
					y_pos = y_pos + 1
					if range(4, 8)(x_pos) and range(4, 8)(y_pos) and cardsInDropZone == 4 then
						cardsInDropZone = 0
					end
					print(x_pos,y_pos)
				elseif range(9, 12)(x_pos) and range(9, 12)(y_pos) then
					local p = vmath.vector3(102 + (cardsInDropZone * 115), 270, 1)
					go.set_position(p, message.id)
					cardsInDropZone = cardsInDropZone + 1
					x_pos = x_pos + 1
					y_pos = y_pos + 1
					if range(9, 12)(x_pos) and range(9, 12)(y_pos) and cardsInDropZone == 4 then
						cardsInDropZone = 0
					end
				elseif range(12, 15)(x_pos) and range(12, 15)(y_pos) then
					local p = vmath.vector3(102 + (cardsInDropZone * 115), 176, 1)
					go.set_position(p, message.id)
					cardsInDropZone = cardsInDropZone + 1
					x_pos = x_pos + 1
					y_pos = y_pos + 1
					if range(12, 15)(x_pos) and range(12, 15)(y_pos) and cardsInDropZone == 4 then
						cardsInDropZone = 0
					end
				end
				user_hand = user_hand - 1
				
		end
	elseif message_id == cursor.DRAG then
		print("Drag", message.id, message.group, message.x, message.y, message.dx, message.dy)
		--set z position to 1 to bring dragged card to top
		local p = go.get_position(message.id)
		go.set_position(vmath.vector3(p.x, p.y, 1), message.id)
	end
end		